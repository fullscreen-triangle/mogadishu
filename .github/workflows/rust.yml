name: Rust CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: quality-${{ runner.os }}-rust

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items --all-features
      env:
        RUSTDOCFLAGS: -D warnings

  # Build and test on multiple platforms
  test:
    name: Test Suite
    needs: quality
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        features:
          - default
          - all-features
          - minimal
        include:
          - features: default
            feature-flags: --features oxygen-enhanced,quantum-transport,atp-constraints
          - features: all-features  
            feature-flags: --all-features
          - features: minimal
            feature-flags: --no-default-features

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: test-${{ runner.os }}-${{ matrix.rust }}-${{ matrix.features }}

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev cmake

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake pkg-config

    - name: Build
      run: cargo build --verbose ${{ matrix.feature-flags }}

    - name: Run unit tests
      run: cargo test --verbose ${{ matrix.feature-flags }}

    - name: Run integration tests
      run: cargo test --test '*' --verbose ${{ matrix.feature-flags }}

    - name: Run doc tests
      run: cargo test --doc --verbose ${{ matrix.feature-flags }}

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: benchmark-${{ runner.os }}-rust

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev cmake

    - name: Run benchmarks
      run: cargo bench --all-features

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: target/criterion/

  # Code coverage
  coverage:
    name: Code Coverage
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: coverage-${{ runner.os }}-rust

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev cmake

    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate code coverage
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: cobertura.xml
        fail_ci_if_error: true

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Run cargo deny
      uses: EmbarkStudios/cargo-deny-action@v1

  # Build release artifacts
  build-release:
    name: Build Release
    needs: [quality, test]
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: mogadishu-linux-x64
          - target: x86_64-pc-windows-msvc
            os: windows-latest  
            name: mogadishu-windows-x64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            name: mogadishu-macos-x64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: release-${{ runner.os }}-${{ matrix.target }}

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev cmake

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install cmake pkg-config

    - name: Build release binary
      run: cargo build --release --all-features --target ${{ matrix.target }}

    - name: Create release archive
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          7z a ../../../${{ matrix.name }}.zip mogadishu-cli.exe
        else
          tar czf ../../../${{ matrix.name }}.tar.gz mogadishu-cli
        fi

    - name: Upload release artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.name }}
        path: |
          ${{ matrix.name }}.tar.gz
          ${{ matrix.name }}.zip

  # Create GitHub release
  release:
    name: Create Release
    needs: build-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          mogadishu-*/*

  # Publish to crates.io
  publish:
    name: Publish to crates.io
    needs: [quality, test, security]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev cmake

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_TOKEN }}

  # Update documentation
  docs:
    name: Deploy Documentation
    needs: [quality, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev cmake

    - name: Build documentation
      run: cargo doc --no-deps --all-features

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        force_orphan: true
