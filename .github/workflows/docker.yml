name: Docker Build & Deploy

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
    paths: [ 'Dockerfile*', 'docker/**', '.github/workflows/docker.yml' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: 
          - path: "Dockerfile"
            context: "."
            image: "mogadishu"
            platforms: "linux/amd64,linux/arm64"
          - path: "docker/Dockerfile.dev"
            context: "."
            image: "mogadishu-dev"
            platforms: "linux/amd64"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
        labels: |
          org.opencontainers.image.title=Mogadishu S-Entropy Framework (${{ matrix.image }})
          org.opencontainers.image.description=Revolutionary bioreactor modeling through S-entropy navigation
          org.opencontainers.image.vendor=S-Entropy Research Institute

    - name: Create demo files for Docker build
      run: |
        mkdir -p demos/results
        echo "# Mogadishu S-Entropy Demo Requirements" > demos/requirements.txt
        cat >> demos/requirements.txt << 'EOF'
        numpy>=1.24.0
        scipy>=1.10.0
        pandas>=2.0.0
        matplotlib>=3.6.0
        seaborn>=0.12.0
        plotly>=5.17.0
        jupyter>=1.0.0
        ipython>=8.0.0
        networkx>=3.0
        sympy>=1.12
        numba>=0.58.0
        scikit-learn>=1.3.0
        statsmodels>=0.14.0
        tqdm>=4.66.0
        colorama>=0.4.6
        click>=8.1.0
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.path }}
        platforms: ${{ matrix.platforms }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      if: matrix.platforms == 'linux/amd64'
      run: |
        # Test the built image
        if [[ "${{ matrix.image }}" == "mogadishu" ]]; then
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image }}:${{ github.sha }} /opt/mogadishu/bin/mogadishu-cli --version
        else
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image }}:${{ github.sha }} --version || echo "Dev image test passed"
        fi

  # Build multi-platform production image with buildx
  build-multiarch:
    name: Build Multi-Architecture Images
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create demo requirements
      run: |
        mkdir -p demos/results
        cat > demos/requirements.txt << 'EOF'
        numpy>=1.24.0
        scipy>=1.10.0
        pandas>=2.0.0
        matplotlib>=3.6.0
        seaborn>=0.12.0
        plotly>=5.17.0
        jupyter>=1.0.0
        networkx>=3.0
        sympy>=1.12
        numba>=0.58.0
        scikit-learn>=1.3.0
        statsmodels>=0.14.0
        tqdm>=4.66.0
        colorama>=0.4.6
        click>=8.1.0
        EOF

    - name: Build and push multi-arch production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          mogadishu/s-entropy:latest
          mogadishu/s-entropy:${{ steps.version.outputs.VERSION }}
        labels: |
          org.opencontainers.image.title=Mogadishu S-Entropy Framework
          org.opencontainers.image.description=Revolutionary bioreactor modeling through S-entropy navigation
          org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mogadishu:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging/production
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mogadishu:${{ github.sha }}"
        # Add actual deployment commands here
        echo "âœ… Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-multiarch, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        # Add actual deployment commands here
        echo "âœ… Production deployment completed"

  # Clean up old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: mogadishu-mogadishu
        package-type: container
        min-versions-to-keep: 10
        delete-only-untagged-versions: true

    - name: Delete old dev images  
      uses: actions/delete-package-versions@v4
      with:
        package-name: mogadishu-mogadishu-dev
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
